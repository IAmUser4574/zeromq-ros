{"name":"Zeromq-ros","tagline":"ROS Wrapper Using ZeroMQ","body":"ZeroMQ-ROS\r\n========\r\n\r\nZeroMQ-ROS is a middleware that allows for the control of multiple ROS masters from\r\na single coordinator and makes it easy to create swarm applications using the standard\r\nROS framework. ZeroMQ-ROS uses the ZeroMQ message queue to communicate between the coordinator\r\nand the agents.\r\n\r\n## Architecture\r\n#### Agents\r\n\r\nAgents are members of the swarm that will be controlled by a coordinator. They are referenced by\r\na unique identifying name and listen for JSON serialized ROS messages on a message queue. These\r\nserialized messages are then constructed into ROS messages and published to the associated topic.\r\n\r\n#### Coordinators\r\n\r\nCoordinators are the controllers of the swarm. They can send JSON serialized ROS messages to agents\r\nthat get published to the associated topic on the agent's ROS master.\r\n\r\n#### Naming service\r\n\r\nThe naming service is used to associate a robot's unique name to a host and port of the ZeroMQ\r\nmessage queue. This is vital for having dynamic swarm membership because instead of manually sharing\r\na configuration file, a persistent, centralized server runs that holds all of this information. Also,\r\nthe naming service holds a record of what agents are currently *alive* and able to be used.\r\n\r\n## Install\r\n\r\n**[Warning] You must already have ROS installed on all machines you would like\r\nto have in your swarm**\r\n\r\n#### Ubuntu\r\n    $ git clone https://github.com/wallarelvo/zeromq-ros.git\r\n    $ make\r\n    \r\n#### Other distributions\r\n1. Install Ubuntu\r\n2. Follow instructions for installation on Ubuntu\r\n    \r\n## Setting up the middleware\r\n\r\nIn order to use ZeroMQ-ROS, you must set a few environmental variables. These can\r\nbe set by exporting environmental variables in the terminal every time you start a\r\nnew terminal, or you can be sane and add them to your `.bashrc` or `.bash_profile`.\r\nYou must set variables described below. These environment variables need to be set on\r\nevery computer running ZeroMQ-ROS.\r\n\r\n- `ZMQROS_NS_HOST` -- Host of the naming service\r\n- `ZMQROS_NS_PORT` -- Port of the naming service\r\n- `ZMQROS_ROBOT_ID` -- A unique identifying name of the robot running ZeroMQ-ROS\r\n- `ZMQROS_ROOT` -- The location of the root directory of the ZeroMQ-ROS installation\r\n\r\n## Running\r\n\r\n1. First run the name server and populate the database with robot information. This step does \r\nnot need to occur every time you run the swarm, however, the name server needs to be running for\r\nagents and coordinator nodes to function.\r\n    - `$ zmqros --ns`\r\n2. On all of the agents in the swarm that are specified in the name server, run the agent code. \r\nThis step also does not need to occur everytime the swarm is to be controlled, however to control an agent,\r\nthe agent program must be running.\r\n    - `$ zmqros --agent`\r\n3. Run the coordinator code from where ever the coordinator is located.\r\n\r\n## Coordinator example\r\n\r\n```python\r\nimport zmqros\r\nimport random\r\nimport time\r\nfrom geometry_msgs.msg import Twist\r\n\r\nns_host = zmqros.get_ns_host()\r\nns_port = zmqros.get_ns_port()\r\nswarm = zmqros.coordinator.create_swarm_from_ns(ns_host, ns_port)\r\n\r\n\r\ndef run():\r\n    while True:\r\n        for bot in swarm.get_bots():\r\n            t = Twist()\r\n            t.linear.x = random.random()\r\n            t.linear.y = random.random()\r\n            t.linear.z = random.random()\r\n            t.angular.x = random.random()\r\n            t.angular.y = random.random()\r\n            t.angular.z = random.random()\r\n\r\n            bot.send_message(\"geometry_msgs/Twist\", \"/cmd_vel\", t)\r\n\r\n        time.sleep(0.1)\r\n\r\nif __name__ == \"__main__\":\r\n    run()\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}